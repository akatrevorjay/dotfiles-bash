# Purposefully no shebang.

# Mark that we're during init
export __SHELL_CONF_INIT=true

: "${SHELL_CONF_DIR:="$HOME/.shell"}"

[[ ! -f "$SHELL_CONF_DIR/debug" ]] || DEBUG=true
[[ ! -f "$SHELL_CONF_DIR/verbose" ]] || set -v
[[ ! -f "$SHELL_CONF_DIR/trace" ]] || set -xv

. "$SHELL_CONF_DIR/lib.sh"

shellconf-validate-plugin-type() {
    # Returns failure if plugin path should be used for this system and shell.
    # This is done via simple extension matching.
    local fn fext

    # Allow us to recurse if we should recheck alter a transform
    if [[ "$1" == "__revalidate__" ]]; then
        shift
        fn="$1"
        fext="$2"
    else
        fn="${1##*/}"
        fext="${fn#*.}"
    fi

    case "$fext" in
        $SYSTEM|$CURRENT_SHELL|$SYSTEM.$CURRENT_SHELL)
            return $?
            ;;
        *.sh)
            shellconf-validate-plugin-type __revalidate__ "$fn" "${fext%.sh}"
            return $?
            ;;
        sh.*)
            shellconf-validate-plugin-type __revalidate__ "$fn" "${fext#sh.}"
            return $?
            ;;
        *)
            if [[ "$fn" = *.* ]]; then
                # If there's any extension at all and we haven't okd by now,
                # it's a no-go.
                return 1
            else
                # If there's no extension that's just fine.
                return 0
            fi
            ;;
    esac
    error "Somehow got past the wildcard case in $0"
    return 1
}


shellconf-plugins() {
    local d f

    for d in "$SHELL_CONF_DIR"/{rc,completion,aliases}.d; do
        [ -d "$d" ] || continue

        for f in "$d"/*; do
            # Ensure it's the right kind of plugin
            shellconf-validate-plugin-type "$f" || continue

            # Only files or symlinks thanks
            [ -f "$f" ] || [  -h "$f" ] || continue

            # Only exec if the exec bit is set
            [ -x "$f" ] || continue

            echo "$f"
            ret+=("$f")
        done
    done
}

shellconf-init() {
    debug "ShellConf: Init"

    if [ ! -d "$SHELL_CONF_DIR" ]; then
        error "SHELL_CONF_DIR=\"$SHELL_CONF_DIR\" does not exist"
        return 1
    fi

    local f ret=()
    shellconf-plugins >/dev/null
    for f in "${ret[@]}"; do
        f_rel="${f#$SHELL_CONF_DIR/}"
        debug "-- $f_rel"
        . "$f"
    done
}

shellconf-init
unset __SHELL_CONF_INIT

# vim: set ts=4 sw=4 tw=0 ft=sh et :
